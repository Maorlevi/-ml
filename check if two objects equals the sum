public class pairsum
{

	public static void main(String[] args)
	{
		int A[]={8,5,4,3,1,9,6,2,7,10};
		boolean res=false;

		for (int var:A)
		{
			System.out.print(var+" ");
		}
		
		res=resulthash(A,10);
		
		sort(A,0,A.length-1);
		
		System.out.println();
		
		for (int var:A)
		{
			System.out.print(var+" ");
		}
		
		res=false;
		System.out.println();
		res=result(A,7);
		System.out.println(res);
		
	}

	public static boolean resulthash(int arr[],int num)
	{
		boolean res=false;
		int i;
		Map<Integer, Integer> pairs = new HashMap<Integer, Integer>();
		
		   for(i=0;i<arr.length;i++)
		   {

		        if(pairs.containsKey(arr[i]))
		        {
		            res=true;
		        }
		        else
		        {
		            pairs.put(num-arr[i], arr[i]);
		        }
		    }	
		return res;
	}
	public static boolean result(int arr[],int num)
	{
		boolean res=false;
		int l,r;
		
		l=0;
		r=arr.length-1;

		
		while (l<r)
		{
			if (arr[l]+arr[r]==num)
			{
				res=true;
				System.out.println(arr[l]+"+"+arr[r]+"="+num);
				break;
			}
			else if (arr[l]+arr[r]<num)
			{
				l++;
			}
			else
			{
				r--;
			}
		}
		
		
		
		return res;
	}
	public static int partition(int arr[], int low, int high)
    {
        int pivot = arr[high]; 
         
        // index of smaller element
        int i = (low-1); 
        for (int j=low; j<=high-1; j++)
        {
            // If current element is smaller than or
            // equal to pivot
            if (arr[j] <= pivot)
            {
                i++;
   
                // swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
   
        // swap arr[i+1] and arr[high] (or pivot)
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
   
        return i+1;
    }
   
   
    /* The main function that 
       implements QuickSort()
       arr[] --> Array to be sorted,
       low  --> Starting index,
       high  --> Ending index */
    public static void sort(int arr[], int low, int high)
    {
        if (low < high)
        {
            /* pi is partitioning index, arr[pi] is 
              now at right place */
            int pi = partition(arr, low, high);
   
            // Recursively sort elements before
            // partition and after partition
            sort(arr, low, pi-1);
            sort(arr, pi+1, high);
        }
    }

}
